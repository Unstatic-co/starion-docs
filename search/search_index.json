{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"distribute/","title":"Starion Publishing Methods","text":"<p>We offer 3 ways of publishing your apps. Each one will have some pros and cons listed below:</p>"},{"location":"formula/","title":"Index","text":"<p>Starion's formula language is a tool to help you to build a more flexible apps. This language allows you manipulate your data and show them on the app UI. </p> <p>With formula language, you can do more complex logic when manipulating your data. Instead of just connecting columns data into fields on the UI, you can do something like logic conditions with dynamic context like current signed in user.</p>"},{"location":"formula/#whats-a-formula","title":"What\u2019s a Formula?","text":"<p>Like Text, Number, Date and other basic properties, Formula properties contain a value for each item in a table. While you manually input that value for most properties, Formula properties automatically generate their values by transforming other properties in useful ways. To define those transformations, you write a formula.</p> <p>For example, say you have a database of players on a basketball team that includes a Birthday (Date) property. With a formula, you can subtract the birthday from today\u2019s date to determine each player\u2019s age:</p>"},{"location":"formula/#why-its-useful","title":"Why It\u2019s Useful","text":"<p>The utility of Starion's Formula property is virtually endless; you\u2019ll start with simple, common applications and gradually expand the way you use it.</p> <p>At the highest level, you\u2019ll use Formula properties to achieve one of two outcomes:</p> <ol> <li>Calculate a new value from other properties. In a list of products, for example, you can calculate Total Cost using Price and Quantity:</li> </ol> <ol> <li>Reformat another property. Formulas are often used to change the way values are displayed. You can format dates and times to suit your preferences, and you can combine properties, such as first names and last names:</li> </ol> <p>Reformatting is particularly useful for displaying properties in your Galleries. For example, you can append context to a date property, which would otherwise stand alone ambiguously. In the example below, the age would would have no meaning without \u201cAge.\u201d</p>"},{"location":"formula/#the-ingredients-of-a-formula","title":"The Ingredients of a Formula","text":"<p>When you create a Formula property, you can click any cell within that column to Type a formula. For every formula, you\u2019ll define one or more of these elements:</p> <ol> <li>Do what? The actions to perform, such as add, subtract, format and join.</li> <li>To what? The input values on which to take those actions, such as \"Age: \" and 26</li> <li>When? Any conditions required to take each action, such as if the value of a Progress property is greater than 50%.</li> <li>The action to take if the condition is unmet.</li> </ol> <p>For each item in your database, the formula will return a value.</p> <p>Your formulas will often include multiple actions, input values and conditions. Here\u2019s a breakdown of each:</p>"},{"location":"formula/#do-what-the-actions","title":"Do what? The Actions","text":"<p>In your formulas, you can define the actions to perform on your inputs using operators and functions.</p>"},{"location":"formula/#operators","title":"Operators","text":"<p>Operators are characters you place between input values. They fall into three categories, two of which define actions (the third is for comparisons):</p>"},{"location":"formula/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>You\u2019re likely familiar with + for adding and - for subtracting. These are arithmetic operators. We also have * for multiplying and / for dividing, among a few others. You\u2019ll find them all in The Starion Formula Cheat Sheet.</p>"},{"location":"formula/#concatenation-operators","title":"Concatenation Operators","text":"<p>As we saw above, the + character between two numbers returns their sum. However, when you place the same character between two strings of text, it concatenates that text, or merges them. Therefore:</p> <p>2 + 2 \u2192 4</p> <p>\"Age: \" + \"26\" \u2192 \"Age: 26\"</p> <p>Because the \u201c26\u201d is surrounded with quotes, it is technically a text string, not a number. You\u2019ll learn more about value types shortly.</p>"},{"location":"formula/#functions","title":"Functions","text":"<p>Functions offer predefined actions to perform on their inputs, also known as their arguments. They are formatted as a keyword followed by parentheses, such as format(). Within those parentheses, you insert your arguments, separated by commas, such as add( 2, 2 ).</p> <p>Most formulas accept a specific number of arguments, some of which are optional. For example, the contains() formula tests whether one text string (the first argument) contains another text string (the second argument):</p> <p>contains( \"North Carolina\", \"Carolina\" ) \u2192 true.</p> <p>In addition to the the quantity of arguments, formulas also require the type of arguments, such as numbers versus text strings. We\u2019ve dedicated a section to this important concept.</p> <p>The Starion Formula Cheat Sheet offers a comprehensive list of formulas with a description, argument list and example for each. You may notice that there is a formula for each operator. Above, we saw add( 2, 2 ), which is the same as 2 + 2.</p>"},{"location":"formula/#to-what-the-input-values","title":"To what? The Input Values","text":"<p>As you\u2019ve learned, the actions taken by operators and functions are performed on input values. In the case of functions, those input values are known as arguments. You can supply those input values as property references, literal values or constants.</p>"},{"location":"formula/#property-references","title":"Property References","text":"<p>Most often, you\u2019ll use the values of other properties as your inputs. In other words, you\u2019ll reference those properties.</p> <p>To do so, you\u2019ll use the prop() function. For its argument, you\u2019ll include the name of the property within quotation marks. For our Total Cost calculation, we referenced the Price and Quantity properties: prop( \"Price\" ) and prop( \"Quantity\" ).</p> <p>Remember, there is an iteration of each formula for each item in the database. When an iteration references another property, it uses the instance of that property for the same database item. In the example above, each iteration of the formula multiplies the price and quantity for the product on the same row.</p>"},{"location":"formula/#literal-values","title":"Literal Values","text":"<p>In some cases, you\u2019ll enter a fixed value for an input rather than referencing another property. Unlike property references, this value will be the same for all items in the database.</p> <p>As we did with age, we can add a contextual term to the School property of our basketball players. The appended text, \"School: \", is a literal value that\u2019s unchanged for all players. Meanwhile, the school itself is a reference to the School property, which differs from player to player:</p> <p>\"School: \" + prop( \"School\" )</p> <p>Then, we can display the contextualized version (the School \u2192 Labeled property) on our Gallery cards:</p>"},{"location":"formula/#context-variables","title":"Context Variables","text":"<p>Starion also includes easy references to provide a current context of the running app or the screen user's, including current user email, identifier.</p> <ol> <li>CurrentUser</li> <li>CurrentRow (Collection Page, Custom Page components)</li> <li>Control Values(Custom Page)</li> </ol>"},{"location":"formula/#when-conditions","title":"When? Conditions","text":"<p>In many of your formulas, you\u2019ll want to return values based on whether certain conditions are met. In this simple example, the formula returns an emoji based on the value of the Mood property: To create a condition, you\u2019ll use the if() function, which accepts three arguments: 1. An expression (defined under Nesting) that evaluates to true or false, typically using comparison operators (see below) or comparison functions (see the Cheat Sheet). 2. A value to return if the condition is true. 3. A value to return if the condition is false.</p>"},{"location":"formula/#comparison-operators","title":"Comparison Operators","text":"<p>Like the arithmetic operators we explored previously (+, -, *, etc.), comparison operators are characters placed between values. Unlike arithmetic operators, comparison operators can only return true or false; they compare inputs. For example, the == operator tests whether the values are equal: 2 == 2 \u2192 true.</p> <p>Here are the six comparison operators you\u2019ll use in Starion, which are also available in the The Starion Formula Cheat Sheet:</p> <p>Revisiting our Moods example, you can see how we constructed the formula:</p> <p>if( prop( \"Mood\" ) == \"Happy\", \"?\", \"?\" )</p> <p>In other words, \"If the Mood property is \"Happy,\" return \"?\"; otherwise, return \"?.\"</p>"},{"location":"formula/#returned-value","title":"Returned Value","text":"<p>For each item in your database, a Formula property evaluates its contents (the conditions, actions and input values) to return its value.</p>"},{"location":"formula/#the-importance-of-value-types","title":"The Importance of Value Types","text":"<p>As you work with formulas, you'll want to remain mindful of value types. In the above examples, you've seen number, text, date and true/false values.</p> <p>Functions and operators require particular value types. For example, you cannot add 2 (a number) to \"2\" (a textstring, as indicated by the quotation marks). The formula 2 + \"2\" will throw a Type mismatch error.</p> <p>Similarly, you cannot concatenate (merge) a number with a text string. \"Age: \" + 26 will also throw a Type mismatch error.</p> <p>To avoid these errors, Starion offers functions for converting one type two another.</p> <p>Convert a Text String to a Number To convert a text string to a number, we use the toNumber() function:</p> <p>toNumber( \"2\" ) \u2192 2.</p> <p>Therefore: 2 + toNumber( \"2\" ) \u2192 4</p> <p>Convert a Number to a Text String The format() function converts a number to a text string:</p> <p>format( 26 ) \u2192 \"26\"</p> <p>That's how we were able to add the contextual term to our Age property in our basketball team gallery:</p> <p>\"Age: \" + format( 26 ) \u2192 \"Age: 26\"</p> <p>Label Age with Formula However, the age was actually a property reference:</p> <p>\"Age: \" + format( prop( \"Age\" ) ) \u2192 \"Age: 26\"</p>"},{"location":"formula/#starions-core-value-types","title":"Starion's Core Value Types","text":"<p>Number A number is \u2014 surprise! \u2014 a numeric value. It can be an integer or a floating point number (containing decimals), and either positive or negative.</p> <p>Values within Number properties are of the number type. Therefore, when you reference those properties as formula inputs, they are of the number type. You can convert them to strings using the format() formula.</p> <p>When a table cell displays a number, the number is right-aligned. You can format it in various ways, including percents and currencies, by hovering your cursor over the value and clicking the 123 button.</p> <p>String (Text) A string is one or more characters that represent text. Those characters may all be numeric, which can cause some confusion. For example, you can type 12345 in both a Text property (the string value type) and a Number property (the number value type). When you reference those properties in your formulas, the value type will match the property type.</p> <p>For this reason, it's important to use true Number properties for numbers. Entering numeric characters within a Text property will prohibit you from using them in calculations. It will also disrupt your sorting.</p> <p>When typing strings in formulas, you'll surround them in double quotes: \"26\" is a string, while 26 is a number.</p> <p>Additionally, strings are left-aligned in table cells. If you see left-aligned numeric characters, you know they form a string rather than the true number type.</p> <p>Boolean (True or False) A value of the boolean type is either true or false. As we saw with the if() formula, you can produce a boolean value using comparison operators.</p> <p>In Starion, boolean values render checkboxes in your databases. Therefore, if your formula returns a boolean value, the field will display a checkbox \u2014 checked if true; unchecked if false.</p> <p>Date In Starion, a date is a value created with a Date property, a Created Time property, or a Last Edited Time property \u2014 all of which you can reference within functions. The now() function also serves as a date. It always reflects the current time.</p>"},{"location":"formula/#nested-inputs-operators-and-functions","title":"Nested Inputs, Operators and Functions","text":"<p>Within your formulas, you'll often use functions, operators and input values within functions. This is known as nesting.</p> <p>When you combine inputs, operators and functions in a way that returns a single value, they form an expression. An expression can be as simple as 2 or as complex as an elaborate combination of nested formulas \u2014 so long as it evaluates to a single value.</p> <p>Therefore, a function's arguments can be more than a simple property reference or literal value; any expression can serve as a function's argument so long as it returns the correct value type.</p> <p>Take the simple formula add( 100, 20 ). Because arguments can be expressions, that simple formula could become add( 100, multiply( 100, .2 ) ), where the second argument, 20, is the output of a the multiply() function.</p> <p>Taking it one step further, the input values could be references to other properties:</p> <p>add( prop( \"Cost of Goods\" ), multiply( prop( \"Cost of Goods\" ), prop( \"Markup\" ) ) ) What we've done is calculate the Selling Price of a product at a variable markup:</p>"},{"location":"formula/#nested-if","title":"Nested if()","text":"<p>One of the most common uses of nesting is with the if() function. Remember, if() tests a boolean expression (the first argument). If it's true, it evaluates the second argument; otherwise, it evaluates the third argument:</p> <p>if( 2 == 1, \"Equal\", \"Unequal\" ) \u2192 \"Unequal\"</p> <p>Most often, you'll want your first argument to test another property. Here, we return true or false (represented by a checkbox), based on the Status of each task:</p> <p>if( prop( \"Status\" ) == \"Complete\", true, false )</p> <p>You can use the and() and or() functions to test two expressions. Below, we mark each order as \"Complete\" if it's both paid and shipped; otherwise it's \"In Progress.\"</p> <p>if( and( prop( \"Paid\" ), prop( \"Shipped\" ) ), \"Complete\", \"In Progress\" )</p> <p>At times, you'll want more than just a true option and a false option. We can add a third emoji to our moods database, for example:</p> <p>if(prop(\"Mood\") == \"Happy\", \"?\", if( prop( \"Mood\" == \"Okay\", \"?\", \"?\" ) ) In other words: if Mood is \"Happy,\" display ?; otherwise, if Mood is \"Okay,\" display ?; otherwise, display ?.</p>"},{"location":"formula/#practical-examples-of-starion-formulas","title":"Practical Examples of Starion Formulas","text":"<p>In Simple, Useful Formula Examples, you'll find many of the above examples, plus a handful of others, to reference as you dive deeper into the Formula property. Also be sure to keep The Starion Formula Cheat Sheet handy, and never hesitate to tweet me with questions.</p>"},{"location":"getting-started/core-concepts/app-types/","title":"App Types","text":""},{"location":"getting-started/core-concepts/app-types/#summary","title":"Summary","text":"<p>In this article, we introduce you the types of app that Starion can support you to build as well as provide the comparison between two of them. After reading the article, you can decide which type of app is suitable for your project.</p>"},{"location":"getting-started/core-concepts/app-types/#detailed-overview","title":"Detailed Overview","text":""},{"location":"getting-started/core-concepts/app-types/#definition","title":"Definition","text":"<p>When we talk about the use of data, we divide them into two categories: data only for internal operation (private within the business), and data shown to the customers (public to everyone).</p> <p>Starion supports the non-code developers to build two types of app suitable for each usage. They are called Internal App and External App</p> <ul> <li>Private App is for internal operation. It can be an optimal solution to the digital transformation of a business, therefore increasing the performance and productivity. </li> <li>Public App is for external side of business operation: to communicate and deliver service to the customers. The app may not be the core product of the business, but it can attribute more value to the core products and services.  </li> </ul>"},{"location":"getting-started/core-concepts/app-types/#choose-suitable-type","title":"Choose suitable type","text":"<p>From the definition above, you can see some differences in the usage and target users of each app type. Below we prepare a comparison table for the two types. This can help you determine which one is good enough for your business.  </p> <p>These differences also result to the difference in the pricing model we built for each type, so the cost charged on your team, organization, or company can be optimized at most.</p>"},{"location":"getting-started/core-concepts/formula/","title":"Formula","text":""},{"location":"getting-started/data%20source/","title":"Data source","text":""},{"location":"getting-started/data%20source/#summary","title":"Summary","text":"<p>This article is about all of the data source management you can do in Starion. You also can find the instruction on how to set up the synchronization between your original data table and Starion, so you can easily build up your database in Starion and start building your own app.</p>"},{"location":"getting-started/data%20source/#detailed-overview","title":"Detailed Overview","text":"<p>In Starion, data is the core element that you must have to build an app. Starion learns the way you organize your table and, based on that, generate the app for you.</p> <p>We understand that bringing your data table around is really an annoying thing, and it may be the cause of the data mess-up. Therefore, Starion allows you to set up the direct synchronization. We support the work on 2 online platforms: Google Sheets and Airtable.</p> <p> </p>"},{"location":"getting-started/designing-app/","title":"Designing your App","text":"<p>Hello \u01afWWorl;d *hello</p>"},{"location":"getting-started/designing-app/#page-location","title":"Page Location","text":""},{"location":"getting-started/designing-app/#front-pages","title":"Front Pages","text":""},{"location":"getting-started/designing-app/#other-pages","title":"Other Pages","text":""},{"location":"getting-started/designing-app/#page-types","title":"Page Types","text":""},{"location":"getting-started/designing-app/#collection-page","title":"Collection Page","text":""},{"location":"getting-started/designing-app/#form-page","title":"Form Page","text":""},{"location":"getting-started/designing-app/#custom-page","title":"Custom Page","text":""},{"location":"getting-started/designing-app/#details-page","title":"Details Page","text":""},{"location":"getting-started/designing-app/#creating-your-first-page","title":"Creating your first page","text":""},{"location":"getting-started/designing-app/collection-page/Filter/1.%20Overall%20Concept%20of%20Filter/","title":"Filter","text":""},{"location":"getting-started/designing-app/collection-page/Filter/1.%20Overall%20Concept%20of%20Filter/#summary","title":"Summary","text":"<p>This is about the concept Filtering and the function Filter in Starion.</p> <p>Going through this article, you can understand the work of Filtering and the reason why Filter is a powerful feature. </p> <p>There are two types of filtering in Starion, we provide the comparison in this article as well. Based on the comparison, you can find which one is more suitable for your work.</p>"},{"location":"getting-started/designing-app/collection-page/Filter/1.%20Overall%20Concept%20of%20Filter/#feature-overview","title":"Feature Overview","text":""},{"location":"getting-started/designing-app/collection-page/Filter/1.%20Overall%20Concept%20of%20Filter/#how-it-works","title":"How it works","text":"<p>In the App Building Briefing, we all got a point that each collection page takes a table as its data source and generate a view equivalently. </p> <p>However, with the help of Filter, you can modify several views on the table, and then generate them to several collection pages. </p> <p> </p> <p>Comparing with the work with no Filter tool, there are a lot of benefits you can get: - No need to divide data into several tables - No need to sync several tables just for one app - Even possibility to generate several apps with one data source. - (Therefore) Cost-saving, since the fee is charged based on the number of synced rows</p>"},{"location":"getting-started/designing-app/collection-page/Filter/1.%20Overall%20Concept%20of%20Filter/#types","title":"Types","text":"<p>As mentioned in the Summary, there are two types of Filter: - Tool Filter allows you to create filters by choosing components directly on the App Editor's interface. It is good enough when you use simple filters. - Formula Filter allows you to write a formula to filter your data. If you use complicated filters, you should choose this type.</p>"},{"location":"getting-started/designing-app/collection-page/Filter/1.%20Overall%20Concept%20of%20Filter/#see-also","title":"See Also","text":"<p>Related articles that you might want to read - Use Tool Filter - Use Formula Filter - Formula</p>"},{"location":"getting-started/designing-app/collection-page/layout/","title":"Layout","text":""},{"location":"getting-started/designing-app/collection-page/layout/#concept","title":"Concept","text":"<p>Normally, the work of design an layout includes so many things. You should take care about the elements and several principles for the best practice of layout design such as alignment, visual hierarchy, contrast and balance.</p> <p>However, in Starion, it is simplified since all designing job has been completed. All concerns are taken care: which font to use, the size of each elements for a bright view, or interactive elements like action buttons or dragging menu, and so on. When there are changes made, things will be automatically adjusted while still in the balance and fits the frame well.</p> <p>You can ensure that every detail of the interface is on set for the best practice of UI design (User Interface). You don't need to be an UI expert and you still can build pages with high effect for the good user experience.  The only thing you should be concerned are  - The type of layout you would prefer, and - The content. </p> <p>In Briefing, by actions to click &amp; choose, you describe your idea of page layout &amp; content, and Starion will build up the page for you.</p>"},{"location":"getting-started/designing-app/collection-page/layout/#type-of-layouts","title":"Type of layouts","text":"<p>We provide you with 4 options of layouts: List Layout, Card Layout, Map Layout, and Calendar Layout. </p> <ul> <li> <p>List Layout can be found in several popular apps as the examples for actual practice such as Gmail or how Spotify shows songs of a playlist or an album.    </p> </li> <li> <p>Card Layout turns your monotonic table view into a gallery. Pinterest can be the most straightforward example for the application of the Card layout.    </p> </li> <li> <p>Map Layout represents the items in an address list and show them as pins of location on a map. This is the layout that some big company like Apple guide their customers the way to find the nearest stores in the nearby.    </p> </li> <li> <p>Calendar Layout organizes your items into a Calendar, each item is an event. The layout make the view more intitutive when you manage your items by timeline.      </p> </li> </ul> <p>There can be more than just 4 layouts. However, when we condensed them all, these layout are the most basic. They are applied by (almost) any apps you can think about, and fit all the way you want to organize your items.</p>"},{"location":"getting-started/designing-app/collection-page/layout/#content","title":"Content","text":"<p>To fill the content into the layout, there are 3 ways for you * Enter a value: use this when you want the content to be fixed for all case. * Choose a column of data in your table: Use this in case the content varies in each case, and the data is available in your data table. * Use Formula to get the wanted value : Use this if the content varies in each case, and the wanted data should go through some more filter or calculation.</p> <p> </p>"},{"location":"getting-started/designing-app/collection-page/layout/list/","title":"List","text":""},{"location":"getting-started/designing-app/collection-page/layout/list/#list-layout","title":"List Layout","text":"<p>This is to help you working with the List layout settings-up for your Collection page. See the picture below to see how each setting works on the overall layout and each item layout.  </p> <p>Properties Detail</p> <ol> <li>Image    Required: No    Data type: Text (URL)    Image Ratio: 1:1 </li> <li>Title    Required: Yes    Data type: Text    Limited Line: 2 </li> <li>Subtitle    Required: No    Data type: Text    Limited Line: 2 </li> <li>Accessory    Required: No    Data type:  </li> <li>Group By</li> </ol>"}]}